import streamlit as st
# import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
from collections import Counter

# Cho 3 file csv nhu sau:

# San_pham.csv: ch·ª©a th√¥ng tin s·∫£n ph·∫©m thu·ªôc nh√≥m ‚ÄúChƒÉm s√≥c da m·∫∑t‚Äù nh∆∞ ma_san_pham, ten_san_pham, gia_ban, gia_goc, phan_loai, mo_ta, diem_trung_binh
# Khach_hang.csv: ch·ª©a th√¥ng tin kh√°ch h√†ng g·ªìm ma_khach_hang,ho_ten
# Danh_gia.csv: ch·ª©a th√¥ng tin ƒë√°nh gi√° c·ªßa kh√°ch h√†ng cho s·∫£n ph·∫©m g·ªìm id, ma_khach_hang, noi_dung_binh_luan, ngay_binh_luan, gio_binh_luan, so_sao, ma_san_pham

#################### SET SIDEBAR, PAGE TITLE


st.set_page_config(page_title="Product Analysis", page_icon="üîç")
st.title("üîç Ph√¢n t√≠ch s·∫£n ph·∫©m:")

st.sidebar.success("Gi√°o Vi√™n H∆∞·ªõng D·∫´n: /n # KHU·∫§T THU·ª≤ PH∆Ø∆†NG")
st.sidebar.success("H·ªçc Vi√™n:/n # NGUY·ªÑN CH·∫§N NAM /n # CH·∫æ TH·ªä ANH TUY·ªÄN")
st.sidebar.success("Ng√†y b√°o c√°o: /n # 16/12/2024")

################################ BI·ªÇU ƒê·ªí T·ªîNG QUAN V·ªÄ B√åNH LU·∫¨N V√Ä S·∫¢N PH·∫®M

# "C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/"

san_pham = pd.read_csv('C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/San_pham.csv')
danh_gia= pd.read_csv('C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/Danh_gia.csv')
khach_hang= pd.read_csv('C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/Khach_hang.csv')

# H√†m ph√¢n lo·∫°i d·ª±a tr√™n gi√° tr·ªã c·ªßa c·ªôt 'so_sao'
def classify_rating(star_rating):
    if star_rating <= 4:
        return 'negative'
    elif star_rating == 5:
        return 'positive'

# √Åp d·ª•ng h√†m v√†o c·ªôt 'so_sao' ƒë·ªÉ t·∫°o c·ªôt m·ªõi 'phan_loai_danh_gia'
danh_gia['phan_loai_danh_gia'] = danh_gia['so_sao'].apply(classify_rating)


danhgia_sanpham = danh_gia.merge(san_pham,on="ma_san_pham", how='left')
df=danhgia_sanpham.copy()

#------------START_H√†m th·ªëng k·∫ø s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo th√°ng-------------------------------
def analyze_month_statistics(df, selected_product):
    """Th·ªëng k√™ s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo th√°ng v√† tr·ª±c quan h√≥a tr√™n bi·ªÉu ƒë·ªì."""
    st.write(f"**I. S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo th√°ng cho s·∫£n ph·∫©m ID '{selected_product}':**")

    # L·ªçc d·ªØ li·ªáu cho s·∫£n ph·∫©m c·ª• th·ªÉ
    df = df[df['ma_san_pham'] == selected_product]

    # Convert 'ngay_binh_luan' to datetime if it's not already
    df['ngay_binh_luan'] = pd.to_datetime(df['ngay_binh_luan'], dayfirst=True)

    # Nh√≥m d·ªØ li·ªáu theo th√°ng
    df['month'] = df['ngay_binh_luan'].dt.to_period('M')  # Creates a Period index for month
    month_count = df.groupby('month').size().reset_index(name='count')

    # Sort by 'month' column in descending order
    month_count = month_count.sort_values(by='month', ascending=False)

    # L·∫•y th√°ng c√≥ s·ªë l∆∞·ª£t b√¨nh lu·∫≠n nhi·ªÅu nh·∫•t
    if not month_count.empty:
        max_count = month_count['count'].max()
        top_month_row = month_count[month_count['count'] == max_count].iloc[0]
        st.write(f"Th√°ng c√≥ s·ªë l∆∞·ª£t ƒë√°nh gi√° nhi·ªÅu nh·∫•t: {top_month_row['month']} v·ªõi {top_month_row['count']} ƒë√°nh gi√°.")

        # Tr·ª±c quan h√≥a b·∫±ng Matplotlib
        plt.figure(figsize=(15, 7))
        
        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
        bars = plt.bar(month_count['month'].astype(str), month_count['count'])
        
        # Ti√™u ƒë·ªÅ v√† nh√£n
        plt.title(f'S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo th√°ng - S·∫£n ph·∫©m {selected_product}', fontsize=15)
        plt.xlabel('Th√°ng', fontsize=12)
        plt.ylabel('S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        
        # Th√™m s·ªë l∆∞·ª£ng comment l√™n t·ª´ng c·ªôt
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                     f'{int(height)}', 
                     ha='center', va='bottom', 
                     fontweight='bold')
        
        plt.tight_layout()
        st.pyplot(plt)
    else:
        st.write("Kh√¥ng c√≥ b√¨nh lu·∫≠n n√†o.")
#------------END_H√†m th·ªëng k·∫ø s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo th√°ng-------------------------------

#------------START_H√†m th·ªëng k·∫ø s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo gi·ªù-------------------------------
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

def analyze_comments_by_hour(df, product_id):
    """Th·ªëng k√™ s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo khung gi·ªù trong ng√†y cho m·ªôt s·∫£n ph·∫©m."""
    
    # Ch·ªçn ra b√¨nh lu·∫≠n c·ªßa s·∫£n ph·∫©m c·ª• th·ªÉ
    product_comments = df[df['ma_san_pham'] == product_id]
    
    # Chuy·ªÉn ƒë·ªïi c·ªôt 'gio_binh_luan' sang ki·ªÉu datetime ƒë·ªÉ l·∫•y gi·ªù
    product_comments['gio_binh_luan'] = product_comments['gio_binh_luan'].astype(str)
    product_comments['hour'] = pd.to_datetime(product_comments['gio_binh_luan'], format='%H:%M').dt.hour

    # ƒê·∫øm s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo gi·ªù
    hourly_counts = product_comments.groupby('hour').size().reset_index(name='count')

    # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
    st.write(f"**II. S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo gi·ªù cho s·∫£n ph·∫©m ID '{product_id}':**")

    # Tr·ª±c quan h√≥a b·∫±ng matplotlib
    plt.figure(figsize=(10, 5))
    bars = plt.bar(hourly_counts['hour'], hourly_counts['count'], color='skyblue')
    plt.xlabel('Khung gi·ªù trong ng√†y')
    plt.ylabel('S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n')
    plt.title(f"S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo khung gi·ªù cho s·∫£n ph·∫©m ID {product_id}")
    plt.xticks(hourly_counts['hour'])  # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c gi·ªù ƒë∆∞·ª£c hi·ªÉn th·ªã
    plt.grid(axis='y')

    # Th√™m nh√£n s·ªë li·ªáu l√™n t·ª´ng c·ªôt trong bi·ªÉu ƒë·ªì
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2, yval, int(yval), va='bottom')  # va='bottom' ƒë·ªÉ ƒë·∫∑t nh√£n ·ªü tr√™n c·ªôt

    # Hi·ªÉn th·ªã ƒë·ªì th·ªã trong Streamlit
    st.pyplot(plt)

    # ƒê·ªÉ ng∆∞·ªùi d√πng ch·ªçn khung gi·ªù
    selected_hour = st.selectbox('Ch·ªçn khung gi·ªù b·∫°n mu·ªën xem b√¨nh lu·∫≠n:', hourly_counts['hour'].unique())

    # L·∫•y b√¨nh lu·∫≠n trong khung gi·ªù ƒë√£ ch·ªçn
    comments_in_selected_hour = product_comments[product_comments['hour'] == selected_hour]
    
    if not comments_in_selected_hour.empty:
        st.write(f"**Chi ti·∫øt b√¨nh lu·∫≠n v√†o khung gi·ªù {selected_hour}:**")
        st.dataframe(comments_in_selected_hour[['gio_binh_luan', 'noi_dung_binh_luan', 'so_sao']])  # Gi·∫£ s·ª≠ c√≥ c√°c c·ªôt c·ª• th·ªÉ

        # Th·ªëng k√™ s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo ƒë√°nh gi√° cho 5 lo·∫°i ƒë√°nh gi√°
        rating_counts = comments_in_selected_hour['so_sao'].value_counts().reindex(range(1, 6), fill_value=0).reset_index()
        rating_counts.columns = ['so_sao', 'count']

        # Hi·ªÉn th·ªã th·ªëng k√™ ƒë√°nh gi√°
        st.write(f"**Th·ªëng k√™ b√¨nh lu·∫≠n theo ƒë√°nh gi√° cho khung gi·ªù {selected_hour}:**")
        
        # T·∫°o c·ªôt trong Streamlit ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng v√† bi·ªÉu ƒë·ªì ngang nhau
        col1, col2 = st.columns([1, 2])  # C·ªôt 1 (b·∫£ng) 1 ph·∫ßn, c·ªôt 2 (bi·ªÉu ƒë·ªì) 2 ph·∫ßn

        # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™ trong c·ªôt 1
        with col1:
            st.dataframe(rating_counts)

        # Tr·ª±c quan h√≥a th·ªëng k√™ ƒë√°nh gi√° trong c·ªôt 2
        with col2:
            plt.figure(figsize=(5, 5))  # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªßa bi·ªÉu ƒë·ªì
            plt.bar(rating_counts['so_sao'].astype(str), rating_counts['count'], color='green')
            plt.xlabel('ƒê√°nh gi√°')
            plt.ylabel('S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n')
            plt.title(f"S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo ƒë√°nh gi√° v√†o khung gi·ªù {selected_hour} cho s·∫£n ph·∫©m ID {product_id}")
            plt.xticks(rating_counts['so_sao'].astype(str))  # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c ƒë√°nh gi√° ƒë∆∞·ª£c hi·ªÉn th·ªã
            plt.grid(axis='y')
            st.pyplot(plt)

        # ƒê·ªÉ gi·ªØ cho chi·ªÅu cao c·ªôt c√¢n b·∫±ng, t·∫°o m·ªôt d√≤ng tr·ªëng b·∫±ng c√°ch s·ª≠ d·ª•ng `st.empty()`.
        st.empty()  # Gi·ªØ kh√¥ng gian cho chi·ªÅu cao b·∫±ng nhau
    else:
        st.write(f"Kh√¥ng c√≥ b√¨nh lu·∫≠n n√†o v√†o khung gi·ªù {selected_hour}.")
#------------END_H√†m th·ªëng k·∫ø s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo gi·ªù-------------------------------

#------------START_H√†m th·ªëng k·∫ø s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo lo·∫°i sao-------------------------------
def plot_star_ratings(danh_gia, user_input_int):
    # Chuy·ªÉn ƒë·ªïi user_input_int sang ki·ªÉu int n·∫øu c·∫ßn
    user_input_int = str(user_input_int)
    
    # Th·ªëng k√™ s·ªë l∆∞·ª£ng ƒë√°nh gi√° theo t·ª´ng sao
    star_ratings_count = danh_gia[danh_gia['ma_san_pham'] == user_input_int]['so_sao'].value_counts().sort_index()
    
    # ƒê·∫£m b·∫£o c√≥ ƒë·ªß c√°c m·ª©c sao t·ª´ 1 ƒë·∫øn 5
    full_star_ratings = pd.Series([0] * 5, index=range(1, 6))
    full_star_ratings.update(star_ratings_count)
    
    # Hi·ªÉn th·ªã th√¥ng tin tr√™n Streamlit
    st.write(f"**III. S·ªë l∆∞·ª£ng ƒë√°nh gi√° theo t·ª´ng sao c·ªßa s·∫£n ph·∫©m ID '{user_input_int}':**")

    # T·∫°o bi·ªÉu ƒë·ªì d·∫°ng c·ªôt v·ªõi matplotlib
    fig, ax = plt.subplots()
    ax.bar(full_star_ratings.index, full_star_ratings.values, color='skyblue')
    ax.set_title('S·ªë l∆∞·ª£ng ƒë√°nh gi√° theo t·ª´ng sao')
    ax.set_xlabel('Sao')
    ax.set_ylabel('S·ªë l∆∞·ª£ng ƒë√°nh gi√°')
    ax.set_xticks(range(1, 6))

    # Th√™m nh√£n cho c√°c c·ªôt
    for i, v in enumerate(full_star_ratings.values, start=1):
        ax.text(i, v, str(v), ha='center', va='bottom')

    # Tr·ª±c quan h√≥a bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    st.write("Chi ti·∫øt ƒë√°nh gi√°")
    # T·∫°o tabs ƒë·ªÉ hi·ªÉn th·ªã b√¨nh lu·∫≠n theo m·ª©c sao
    tabs = st.tabs([f"{star} Sao" for star in range(1, 6)])
    
    for star, tab in zip(range(1, 6), tabs):
        with tab:
            # L·ªçc b√¨nh lu·∫≠n theo sao
            comments_df = danh_gia[(danh_gia['ma_san_pham'] == user_input_int) & (danh_gia['so_sao'] == star)]
            # Hi·ªÉn th·ªã b√¨nh lu·∫≠n d∆∞·ªõi d·∫°ng b·∫£ng
            st.write(f"B√¨nh lu·∫≠n {star} Sao:")
            st.dataframe(comments_df[['noi_dung_binh_luan']],hide_index=True,width=1000)

#------------END_H√†m th·ªëng k·∫ø s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo lo·∫°i sao-------------------------------

#------------START_H√†m v·∫Ω wordcloud b√¨nh lu·∫≠n theo s·∫£n ph·∫©m-------------------------------
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import streamlit as st

def plot_product_comments_wordcloud(df, product_id, stopwords=None):
    """V·∫Ω Word Cloud cho b√¨nh lu·∫≠n c·ªßa s·∫£n ph·∫©m c·ª• th·ªÉ v·ªõi c√°c tab ri√™ng bi·ªát cho t·ª´ t√≠ch c·ª±c v√† ti√™u c·ª±c."""
    # L·ªçc b√¨nh lu·∫≠n c·ªßa s·∫£n ph·∫©m c·ª• th·ªÉ
    product_comments = df[df['ma_san_pham'] == product_id]['noi_dung_binh_luan']

    # Chuy·ªÉn ƒë·ªïi b√¨nh lu·∫≠n th√†nh chu·ªói, lo·∫°i b·ªè NaN
    product_comments = product_comments.dropna()  # B·ªè NaN

    # ƒê·∫£m b·∫£o m·ªói ph·∫ßn t·ª≠ ƒë·ªÅu l√† ki·ªÉu str
    product_comments = product_comments.astype(str).tolist()

    # K·∫øt h·ª£p c√°c b√¨nh lu·∫≠n th√†nh m·ªôt chu·ªói
    all_comments_text = " ".join(product_comments)

    # L·∫•y c√°c t·ª´ t√≠ch c·ª±c v√† ti√™u c·ª±c t·ª´ file
    try:
        with open("C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/positive_words_VN.txt", 'r', encoding='utf-8') as f:
            positive_words = f.read().splitlines()
        
        with open("C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/negative_words_VN.txt", 'r', encoding='utf-8') as f:
            negative_words = f.read().splitlines()
        
        # L·∫•y stopwords n·∫øu c√≥
        if stopwords is None:
            stopwords = set()  # Kh·ªüi t·∫°o v·ªõi t·∫≠p r·ªóng n·∫øu kh√¥ng c√≥ stopwords
        
        with open("C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/vietnamese-stopwords.txt", 'r', encoding='utf-8') as f:
            stopwords.update(f.read().splitlines())
    
    except FileNotFoundError as e:
        st.error(f"Kh√¥ng t√¨m th·∫•y file: {e.filename}. H√£y ki·ªÉm tra ƒë∆∞·ªùng d·∫´n!")
        return

    # T·∫°o tabs cho wordcloud
    tabs = st.tabs(["T·ª´ T√≠ch C·ª±c", "T·ª´ Ti√™u C·ª±c"])

    # T·∫°o h√†m ƒë·ªÉ v·∫Ω Word Cloud t·ª´ chu·ªói vƒÉn b·∫£n
    def create_wordcloud(text):
        # Ki·ªÉm tra n·∫øu vƒÉn b·∫£n kh√¥ng r·ªóng
        if text:
            wordcloud = WordCloud(width=800, height=400, 
                                  background_color='white', 
                                  stopwords=stopwords).generate(text)
            plt.figure(figsize=(10, 5))
            plt.imshow(wordcloud, interpolation='bilinear')
            plt.axis('off')
            st.pyplot(plt)
        else:
            st.write("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã Word Cloud.")

    # T·∫°o Word Cloud cho t·ª´ t√≠ch c·ª±c trong tab T·ª´ T√≠ch C·ª±c
    with tabs[0]:
        st.subheader("Word Cloud cho T·ª´ T√≠ch C·ª±c")
        positive_text = " ".join([word for word in all_comments_text.split() 
                                   if word in positive_words and word not in stopwords])
        create_wordcloud(positive_text)

    # T·∫°o Word Cloud cho t·ª´ ti√™u c·ª±c trong tab T·ª´ Ti√™u C·ª±c
    with tabs[1]:
        st.subheader("Word Cloud cho T·ª´ Ti√™u C·ª±c")
        negative_text = " ".join([word for word in all_comments_text.split() 
                                   if word in negative_words and word not in stopwords])
        create_wordcloud(negative_text)

#------------END_H√†m v·∫Ω wordcloud b√¨nh lu·∫≠n theo s·∫£n ph·∫©m-------------------------------

# T·∫°o giao di·ªán t√¨m ki·∫øm s·∫£n ph·∫©m
st.title("T√¨m Ki·∫øm S·∫£n Ph·∫©m")

# Convert relevant columns to string, handling possible None values
df['ma_san_pham'] = df['ma_san_pham'].astype(str)
df['ten_san_pham'] = df['ten_san_pham'].astype(str)
danh_gia['ma_san_pham'] = danh_gia['ma_san_pham'].astype(str)

# T·∫°o hai tab: "Theo s·∫£n ph·∫©m" v√† "Theo th∆∞∆°ng hi·ªáu"
tabs = st.tabs(["Theo s·∫£n ph·∫©m", "Theo th∆∞∆°ng hi·ªáu"])

# Tab 1: Theo s·∫£n ph·∫©m
with tabs[0]:
    filtered_df = df

    # Remove duplicates based on 'ma_san_pham'
    filtered_df = filtered_df.drop_duplicates(subset='ma_san_pham')

    # Display the filtered products in a dropdown
    if not filtered_df.empty:
        # Create a list of products with their codes for selection
        product_list = filtered_df.apply(lambda x: f"{x['ten_san_pham']} (Code: {x['ma_san_pham']})", axis=1).tolist()
        selected_product = st.selectbox("Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m, m√£ s·∫£n ph·∫©m ho·∫∑c ch·ªçn 1 s·∫£n ph·∫©m:", product_list)
        
        # Extract the selected code from the product string
        selected_code = selected_product.split(" (Code: ")[-1].rstrip(")")
        st.write("B·∫°n ƒë√£ ch·ªçn:", selected_product)
        st.write("M√£ s·∫£n ph·∫©m:", selected_code)

        # Call the functions to analyze data based on the selected product
        analyze_month_statistics(danh_gia, selected_code)
        analyze_comments_by_hour(danh_gia, selected_code)
        plot_star_ratings(danh_gia, selected_code)
        plot_product_comments_wordcloud(danh_gia, selected_code)

    else:
        st.write("Kh√¥ng t√¨m h·∫•y s·∫£n ph·∫©m.")

# Tab 2: Theo th∆∞∆°ng hi·ªáu
with tabs[1]:
    # ƒê·ªçc file brand_lst.csv
    brand_df = pd.read_csv('C:/Users/Windows 10/Documents/Zalo Received Files/GUI_project1_Copy/GUI_project1_Copy/Brand_lst.csv')
    brands = brand_df['thuong_hieu'].tolist()  # Gi·∫£ s·ª≠ c·ªôt t√™n th∆∞∆°ng hi·ªáu l√† 'thuong_hieu'

    # Dropdown cho l·ª±a ch·ªçn th∆∞∆°ng hi·ªáu
    selected_brand = st.selectbox("Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn 1 th∆∞∆°ng hi·ªáu:", brands)

    if selected_brand:
        # L·ªçc DataFrame s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu ƒë√£ ch·ªçn
        filtered_brand_df = df[df['ten_san_pham'].str.contains(selected_brand, case=False) |
                                df['mo_ta'].str.contains(selected_brand, case=False, na=False)]

        # Remove duplicates based on 'ma_san_pham'
        filtered_brand_df = filtered_brand_df.drop_duplicates(subset='ma_san_pham')

        # N·∫øu c√≥ s·∫£n ph·∫©m sau khi l·ªçc
        if not filtered_brand_df.empty:
            # T·∫°o danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã
            product_list_brands = filtered_brand_df.apply(lambda x: f"{x['ten_san_pham']} (Code: {x['ma_san_pham']})", axis=1).tolist()

            # In ra t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu ch·ªçn
            product_count = filtered_brand_df.shape[0]
            st.write(f"C√≥ {product_count} s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu {selected_brand}.")

            # Tr·ª±c quan h√≥a s·ªë l∆∞·ª£ng ƒë√°nh gi√° d·ª±a tr√™n s·ªë sao
            rating_counts = filtered_brand_df[['ma_san_pham', 'ten_san_pham']].copy()
            
            # ƒê·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu c·ªßa 'ma_san_pham' l√† str
            rating_counts['ma_san_pham'] = rating_counts['ma_san_pham'].astype(str)

            # T√≠nh s·ªë l∆∞·ª£ng ƒë√°nh gi√° cho t·ª´ng s·∫£n ph·∫©m d·ª±a v√†o s·ªë sao
            rating_summary = danh_gia.groupby('ma_san_pham')['so_sao'].value_counts().unstack(fill_value=0)
            rating_summary['tong_danh_gia'] = rating_summary.sum(axis=1)

            # Th√™m th√¥ng tin s·ªë l∆∞·ª£ng ƒë√°nh gi√° v√†o rating_counts
            rating_counts = rating_counts.merge(rating_summary[['tong_danh_gia']], on='ma_san_pham', how='left')

            # Tr·ª±c quan h√≥a s·ªë l∆∞·ª£ng ƒë√°nh gi√°
            import matplotlib.pyplot as plt
            plt.figure(figsize=(10, 5))
            bars = plt.barh(rating_counts['ten_san_pham'], rating_counts['tong_danh_gia'], color='skyblue')

            # Th√™m t·ªïng s·ªë l∆∞·ª£ng ƒë√°nh gi√° l√™n tr√™n m·ªói thanh
            for bar in bars:
                plt.text(bar.get_width(), bar.get_y() + bar.get_height() / 2, 
                        f'{int(bar.get_width())}', va='center')
            plt.xlabel('S·ªë l∆∞·ª£ng ƒë√°nh gi√°')
            plt.title(f'S·ªë l∆∞·ª£ng ƒë√°nh gi√° theo s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu {selected_brand}')
            plt.tight_layout()
            st.pyplot(plt)

            # G·ªçi ch·ª©c nƒÉng ph√¢n t√≠ch cho t·ª´ng s·∫£n ph·∫©m n·∫øu c·∫ßn
            selected_product_brand = st.selectbox("Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ph√¢n t√≠ch:", product_list_brands)
            selected_code_brand = selected_product_brand.split(" (Code: ")[-1].rstrip(")")

            st.write("B·∫°n ƒë√£ ch·ªçn s·∫£n ph·∫©m:", selected_product_brand)
            st.write("M√£ s·∫£n ph·∫©m:", selected_code_brand)

            # Chuy·ªÉn ƒë·ªïi selected_code_brand v·ªÅ ki·ªÉu d·ªØ li·ªáu ph√π h·ª£p (n·∫øu c·∫ßn)
            selected_code_brand = str(selected_code_brand)  # ƒê·∫£m b·∫£o m√£ s·∫£n ph·∫©m l√† ki·ªÉu str

            # G·ªçi c√°c h√†m ph√¢n t√≠ch d·ª±a tr√™n m√£ s·∫£n ph·∫©m ƒë√£ ch·ªçn
            st.write("Th·ªëng k√™ s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n:")
            tabs = st.tabs(["Th√°ng","Gi·ªù","ƒê√°nh gi√°"])
            with tabs[0]:
                analyze_month_statistics(danh_gia, selected_code_brand)
            with tabs[1]:
                analyze_comments_by_hour(danh_gia, selected_code_brand)
            with tabs[2]:
                plot_star_ratings(danh_gia, selected_code_brand)
                plot_product_comments_wordcloud(danh_gia, selected_code)


        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m cho th∆∞∆°ng hi·ªáu n√†y.")